/*
 * Copyright 2022 Square Kilometre Array Observatory
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

 /*
  * The protobuf definitions for the PST Local Monitoring and Controle (LMC)
  * used within the PST infrastructure. The interface between the PyTango
  * devices and the the core PST applications is provided by gRPC which uses
  * protobuf messages to define the exchange of data and request messages.
  *
  * Messages are in general made map what is needed by the core applications
  * and not the SKA Telmodel JSON schema. The LMC devices will need to map
  * values from a JSON request to send to a remote implementaion.
  *
  * C++ bindings are generated as part of the ska-pst-common build pipeline
  * but the Python bindings are not generated to allow for the ska-pst-lmc
  * project to use the correct version of protobuf/protoc to generate the
  * bindings. Access to the C++ bindings are available in the ska-pst-common-builder
  * Docker image in /usr/local/include/ska/pst/lmc
  */
syntax = "proto3";

package ska.pst.lmc;

// This is a protobuf representation of the SKA Obs State
// model enum. This is used by the LMC client to check
// the state of the service. Not all states will be valid
// for the system but are provided to map one-to-one with
// the SKA specific model
enum ObsState {
    // The sub-array is ready to observe, but is in an undefined
    // configuration and has no resources allocated.
    EMPTY = 0;

    // The system is allocating resources to, or deallocating resources
    // from, the subarray. This may be a complete de/allocation, or it may
    // be incremental. In both cases it is a transient state and will
    // automatically transition to IDLE when complete. For some subsystems
    // this may be a very brief state if resourcing is a quick activity.
    RESOURCING = 1;

    // The subarray has resources allocated and is ready to be used for
    // observing. In normal science operations these will be the resources
    // required for the upcoming SBI execution.
    //
    // For PST this means that the component has beam configuration and
    // connected to the appropriate ring buffers.
    IDLE = 2;

    // The subarray is being configured ready to scan. On entry to the
    // state no assumptions can be made about the previous conditions. It
    // is a transient state and will automatically transition to READY when
    // it completes normally.
    CONFIGURING = 3;

    // The subarray is fully prepared to scan, but is not actually taking
    // data or moving in the observed coordinate system (it may be
    // tracking, but not moving relative to the coordinate system).
    READY = 4;

    // The subarray is taking data and, if needed, all components are
    // synchronously moving in the observed coordinate system. Any changes
    // to the sub-systems are happening automatically (this allows for a
    // scan to cover the case where the phase centre is moved in a
    // pre-defined pattern).
    SCANNING = 5;

    // The subarray is trying to abort what it was doing due to having been
    // interrupted by the controller.
    ABORTING = 6;

    // The subarray has had its previous state interrupted by the
    // controller, and is now in an aborted state.
    ABORTED = 7;

    // The subarray device is resetting to the IDLE state.
    RESETTING = 8;

    // The subarray has detected an error in its observing state making it
    // impossible to remain in the previous state.
    FAULT = 9;

    // The subarray device is restarting, as the last known stable state is
    // where no resources were allocated and the configuration undefined.
    RESTARTING = 10;
}

// Enum representing particular error code that might
// happen during processing.
enum ErrorCode {
    // Not used but to avoid the default value
    OK                          = 0;
    // Used if the request sent to the service is invalid, such as a Oneof value is not
    // set when it should have been.
    INVALID_REQUEST             = 1;
    // There was an internal server error raised.
    INTERNAL_ERROR              = 2;
    // The component has already been configured for the beam.
    // Should have been deconfigured for beam before the request was made.
    CONFIGURED_FOR_BEAM_ALREADY = 3;
    // The component is not configured for beam.
    NOT_CONFIGURED_FOR_BEAM     = 4;
    // The service is already performing a scann
    ALREADY_SCANNING            = 5;
    // The service is not scanning
    NOT_SCANNING                = 6;
    // The component has already been configured for scan.
    // Should have deconfigured for scan before the request had been made.
    CONFIGURED_FOR_SCAN_ALREADY = 7;
    // There is no scan configuration for the server.
    NOT_CONFIGURED_FOR_SCAN     = 8;
}

// Enum representing the observation mode for the scan
enum ObservationMode {
    // The default observation mode is Pulsar timing
    // which is used to time a known pulsar.
    PULSAR_TIMING       = 0;
    // Dynamic spectrum is used on a target, such as a
    // candidate pulsar, to determine more details about
    // it before doing a pulsar timing scanning.
    DYNAMIC_SPECTRUM    = 1;
    // The observation mode that just records the data
    // without processing the data.
    FLOW_THROUGH        = 2;
}

// Enum representing the LogLevel
enum LogLevel {
    // The least verbose loglevel.
    INFO                = 0;
    //  Information that is diagnostically helpful to people more than just developers.
    DEBUG               = 1;
    //  Anything that can potentially cause application oddities.
    WARNING             = 2;
    // Overall application or system failure that should be investigated immediately.
    CRITICAL            = 3;
    // Logs that highlight when the current flow of execution is stopped due to a failure.
    ERROR               = 4;
}

// A status message that will be returned by the services
// Only valid if there is an error
message Status {
    // The error code for which this status relates to.
    ErrorCode code      = 1;
    // Optional error message to be provided when the error occurs.
    string    message   = 2;
}

// Represents the beam configuration for a share memory ring buffer (SMRB)
message SmrbBeamConfiguration {
    // The key for the data buffer
    string  data_key    = 1;
    // The key for the weights buffer
    string  weights_key = 2;
    // The number of header buffers
    uint32  hb_nbufs    = 3;
    // The size in bytes of the header buffers
    uint64  hb_bufsz    = 4;
    // The number of data buffers
    uint32  db_nbufs    = 5;
    // The size in bytes of the data buffers
    uint64  db_bufsz    = 6;
    // The number of weights bufffers
    uint32  wb_nbufs    = 7;
    // The size of the weights buffers
    uint64  wb_bufsz    = 8;
}

// Message to represent subband configuration for RECV.CORE
//
// The detailed design document has parameters for the
// networking interface, like IP listener address and UDP
// port numbers.  These have not been added here due to
// the fact that we now use Docker/Kubernetes. If they are
// need in the future this is where they should be added.
message ReceiveSubbandResources {
    // subband data key
    string data_key                 = 1;
    // subband weights key
    string weights_key              = 2;
    // RF bandwidth  for sub-band (in MHz)
    double bandwidth                = 3;
    // number of input frequency channels for subband
    uint32 nchan                    = 4;
    // lowest channel number for input of sub-band (in MHz)
    uint32 start_channel            = 5;
    // highest channel number for input of sub-band (in MHz)
    uint32 end_channel              = 6;
    // subband centre frequency (in MHz)
    double frequency                = 7;
    // lowest frequency channel number for output of sub-band
    uint32 start_channel_out        = 8;
    // highest channel number for input of sub-band (in MHz)
    uint32 end_channel_out          = 9;
    // number of output frequency channels of sub-band
    uint32 nchan_out                = 10;
    // total output bandwidth across the frequency channels of sub-band (in MHz)
    double bandwidth_out            = 11;
    // centre RF frequency of output channels of subband (in MHz)
    double frequency_out            = 12;
    // interface to listen on
    string data_host                = 13;
    // udp port to listen on
    uint32 data_port                = 14;
}

// Message to represent configuration for the RECV.CORE of PST
message ReceiveBeamConfiguration {
    // Number of time samples per packet
    uint32 udp_nsamp            = 1;
    // Number of time samples per relative weight
    uint32 wt_nsamp             = 2;
    // Number of frequency channels per packet
    uint32 udp_nchan            = 3;
    // Centre frequency of observation (in MHz)
    double frequency            = 4;
    // Total critical bandwidth (in MHz)
    double bandwidth            = 5;
    // Total number of input channels
    uint32 nchan                = 6;
    // The timing beam identifier
    string frontend             = 7;
    // native polarisation of feed
    string fd_poln              = 8;
    // handedness of feed, having valid values are +1 or -1.
    // For value of +1 for XYZ forming RH set with Z in the
    // direction of propagation. Looking up into the feed of
    // a prime-focus receiver or at the sky).
    sint32 fd_hand              = 9;
    // feed angle (in degrees)
    float fd_sang               = 10;
    // feed tracking mode
    string fd_mode              = 11;
    // feed position angle. If the feed_mode = ‘FA’ this is respect to the telescope’s
    // reference frame (feed_angle = 0), and for feed_mode = ‘CPA’
    // this is with respect to the celestial north (parallic angle = 0)
    // or with respect to the Galactic north for coordinate_mode = ‘GALACTIC’.
    float fa_req                = 12;
    // number of receptors in sub-array
    uint32 nant                 = 13;
    // comma separated list of anntenna names.
    string antennas   = 14;
    // comma separated list of receptor weights (which are floats)
    string ant_weights  = 15;
    // number of polarisation
    uint32 npol                 = 16;
    // number of bits per sample
    uint32 nbits                = 17;
    // number of dimensions - should always be 2
    uint32 ndim                 = 18;
    // sampling time, inferred from the bandwidth, nchan and oversample (in microseconds)
    double tsamp                = 19;
    // oversampling rate - this is a fraction expressed as numerator/denominator
    string ovrsamp     = 20;
    // number of subbands
    uint32 nsubband             = 21;
    // subband configuration
    ReceiveSubbandResources subband_resources = 22;
    // udp format for scan
    string udp_format           = 23;
    // calculated bytes_per_second
    double bytes_per_second     = 24;
    // the beam id for the scans
    string beam_id              = 25;
}

// Message to represent configuration for the DSP.DISK of PST
message DspDiskBeamConfiguration {
    // The key for the data buffer to read from
    string  data_key    = 1;
    // The key for the weights buffer to read from
    string  weights_key = 2;
}

// Message to represent configuration for the STAT.CORE of PST
message StatBeamConfiguration {
    // The key for the data buffer to read from
    string  data_key    = 1;
    // The key for the weights buffer to read from
    string  weights_key = 2;
}

// Message used in unit testing to stub
// out the need for ska-pst-common to
// know about the structure of the core
// PST beam configurations.
//
// This should only be used internally
// of the ska-pst-common project.
message TestBeamConfiguration {
    // A map to put any data into.
    map<string, string> resources = 1;
}

// A message to represent the beam configuration
// for the different services used within PST. This
// message is used as a field within the configure_beam
// and get_beam_configuration service methods.
//
// It is only valid to only one field set, such as smrb,
// receive, or the test field.
message BeamConfiguration {
    oneof configuration {
        // The beam configuration for SMRB.  This message
        // can only be used for sending to/from the
        // SMRB services.
        SmrbBeamConfiguration smrb = 1;
        // The beam configuration for RECV.  This message
        // can only be used for sending to/from the
        // RECV services.
        ReceiveBeamConfiguration receive = 2;
        // The beam configuration for DSP.DISK
        // It is invalid to send DSP.DISK configuration to
        // any other system.
        DspDiskBeamConfiguration dsp_disk = 3;
        // The beam configuration for STAT.CORE
        // It is invalid to send STAT.CORE configuration to
        // any other system.
        StatBeamConfiguration stat = 4;
        // The beam configuration used within testing. This
        // field should only be used with unit testing
        // in the ska-pst-common project.
        TestBeamConfiguration test = 99;
    }
}

// Configure beam is by the LMC to setup the PST
// system ready to then be used for configuring scans.
// The main purpose of this is setting up the ring buffers
// and the subbands that may not change between scans but
// can change between different types of observations at
// different frequency bands and different number of channels.
message ConfigureBeamRequest {
    // The beam configuration for the service. This
    // uses a BeamConfiguration message that has
    // specific fields for the difference services.
    BeamConfiguration beam_configuration = 1;
    // Whether to perform a validation of the configuration
    // without performing the actual configuration process
    // on the service.
    //
    // If not set or the default value of false then the
    // request will be performed.
    bool dry_run = 2;
}

// An empty response message that is used to define
// successfully doing beam configuration.
message ConfigureBeamResponse {}

// An empty message used in requesting the service
// to deconfigure itself of the beam configuration,
// such as disconnecting from ring buffers.
message DeconfigureBeamRequest {}

// An empty response message that is used for
// successful response of deconfiguring beam.
message DeconfigureBeamResponse {}

// An empty message used to request the current beam
// configuration.
message GetBeamConfigurationRequest {}

// The response message for getting the current beam
// configuration for the the component.
message GetBeamConfigurationResponse {
    // The beam configuration for the service. This
    // uses a BeamConfiguration message that has
    // specific fields for the difference services.
    BeamConfiguration beam_configuration = 1;
}

// Message representing scan configuration for SMRB
// this is an empty message for SMRB as there is nothing
// specific for the scan that needs to be configured.
message SmrbScanConfiguration {}


// Message representing scan calibration values
// this is used to allow for the calibration values to
// be null (i.e. not set) as protobuf defaults not
// set fields to zero.
//
// For now SKA will not be using calibration in PST
// but this may change in the future.
message ScanCalibration {
    // operation mode for the injected calibration
    string cal_mode            = 1;
    // calibration modulation frequency (in MHz)
    double cal_freq             = 2;
    // calibration signal duty cycle
    float cal_dcyc             = 3;
    // calibration phase leading edge
    float cal_phs              = 4;
    // number of states in calibration pulse
    uint32  cal_nphs           = 5;
}

// Message representing scan configuration for RECV
//
// NOTE - OBSMODE is listed in detailed design but
// the LMC is set into an OBSMODE and this would
// be sent to DSP directly.
message ReceiveScanConfiguration {
    // UTC data and time to perform the requested command (in UTC string format)
    string activation_time      = 1;
    // Unique indentifer for observation
    string observation_id       = 2;
    // 64-bit scan ID (Deprecated - now part of the Start Scan request)
    uint64 scan_id              = 3 [deprecated = true];
    // The person in charge of the observation
    string observer             = 4;
    // Project the observations are for
    string projid               = 5;
    // ID for sub-array pointing
    string pnt_id               = 6;
    // ID for the sub-array
    string subarray_id          = 7;
    // The name/id of the source
    string source               = 8;
    // Comma separated string of IRTF coordinates of the telescope delay centre (in metres)
    string itrf                 = 9;
    // Beam major axis
    float bmaj                  = 10;
    // Beam minor axis
    float bmin                  = 11;
    // frame of coordinates
    string coord_md             = 12;
    // coordinate epoch
    string equinox              = 13;
    // X component of starting co-ords in COORD_MD frame. If equatorial
    // coordinates this would be the RA in Hours, minutes, seconds
    string stt_crd1             = 14;
    // Y component of starting co-ords in COORD_MD frame. If equatorial
    // coordinates this would be the Dec in degrees, minutes, seconds.
    string stt_crd2             = 15;
    // tracking mode
    string trk_mode             = 16;
    // maximum length of observation (in seconds)
    int32 scanlen_max           = 17;
    // identifier of preconfigured test-vector
    string test_vector          = 18;
    // calibration information for the scan
    ScanCalibration calibration = 19;
    // Execution block id. Used to group multiple scans together
    // with an overall context.
    string execution_block_id   = 20;
}

// Message used for the DSP.DISK scan configuration.
message DspDiskScanConfiguration {
    // maximum length of observation (in seconds)
    double scanlen_max               = 1;
    // The calculated bytes per second for the beam data
    double bytes_per_second          = 2;
    // Execution block id. Used to group multiple scans together
    // with an overall context.
    string execution_block_id        = 3;
}

// Message used for the STAT.CORE scan configuration.
message StatScanConfiguration {}

// Message used in unit testing to stub
// out the need for ska-pst-common to
// know about the structure of the core
// PST scan configurations.
//
// This should only be used internally
// of the ska-pst-common project.
message TestScanConfiguration {
    // Map to put any test scan configuration data into.
    map<string, string> configuration = 1;
}

// A message to represent the scan configuration
// for the different services used within PST. This
// message is used as a field within the configure
// and get_scan_configuration service methods.
//
// It is only valid to only one field set, such as smrb,
// receive, or the test field.
message ScanConfiguration {
    oneof configuration {
        // The scan configuration for SMRB.  This message
        // can only be used for sending to/from the
        // SMRB services.
        SmrbScanConfiguration smrb = 1;
        // The scan configuration for RECV.  This message
        // can only be used for sending to/from the
        // RECV services.
        ReceiveScanConfiguration receive = 2;
        // The scan configuration for DSP.DISK. This message
        // can only be used for sending to/from the DSP
        // services.
        DspDiskScanConfiguration dsp_disk = 3;
        // The scan configuration for STAT.CORE. This message
        // can only be used for sending to/from the STAT
        // services.
        StatScanConfiguration stat = 4;

        // The scan configuration used within testing. This
        // field should only be used with unit testing
        // in the ska-pst-common project.
        TestScanConfiguration test = 99;
    }
}

// Request message to configure a server to
// be ready for a scan request.
message ConfigureScanRequest {
    // The scan configuration for the service. This
    // uses a ScanConfiguration message that has
    // specific fields for the difference services.
    ScanConfiguration scan_configuration = 3;
    // Whether to perform a validation of the configuration
    // without performing the actual configuration process
    // on the service.
    //
    // If not set or the default value of false then the
    // request will be performed.
    bool dry_run = 4;
}

// An empty message used as a response for
// a configure request.
message ConfigureScanResponse {}

// An empty message used to retreive the current
// scan configuration of a component.
message GetScanConfigurationRequest {}

// A response message used to return the scan
// configuration of the a component.
message GetScanConfigurationResponse {
    ScanConfiguration scan_configuration = 3;
}

// An empty message used to request that a
// server deconfigures itself.
message DeconfigureScanRequest {}

// An empty message used as a response for
// a deconfigure request.
message DeconfigureScanResponse {}

// Request that the component initiates a scan
//
// Expect a timestamp for when the Scan should
// start.  This is an open issue at the moment.
message StartScanRequest {
    // The unique ID for the scan.
    int64 scan_id       = 1;
}

// Response for the scan request.
message StartScanResponse {}

// Request that the component stops scanning
//
// if end_time > 0 then the scan must stop
// at that exact time.
message StopScanRequest {
    // the time at which all the scans should stop
    // as to allow synchonisation between RECV subbands
    // This is in milliseconds from UNIX epoch
    // (January 1, 1970 00:00:00 UTC)
    uint64 end_time = 1;
}

// Response for the end scan request.
message StopScanResponse {}

// Request from the server to find out what state it is in.
message GetStateRequest {}

// Response from the server for what state it is in.
message GetStateResponse {
    // The current ObsState of the managed service.
    ObsState state = 1;
}

// Message for the statistics of a subband ring buffer
message SmrbStatitics {
    // total number of buffers
    uint32 nbufs = 1;

    // size of each buffer in bytes
    uint64 bufsz = 2;

    // total number of buffers written to the ring
    uint64 written = 3;

    // total number of buffers read from the ring
    uint64 read = 4;

    // number of filled buffers in the ring
    uint32 full = 5;

    // number of cleared buffers in the ring
    uint32 clear = 6;

    // number of free buffers in the ring
    uint32 available = 7;
}

// Message for the monitor results of a subband.
// This includes the data and weights statistics.
// It is up to the client of this to aggregate the
// data and weights statistics.
message SmrbMonitorData {
    // The data ring buffer statistics.
    SmrbStatitics data = 1;
    // The weights ring buffer statistics.
    SmrbStatitics weights = 2;
}

// Message for the Receive monitoring results of a subband.
message ReceiveMonitorData {

    // UDP data received in bytes per second.
    // This is the instantaneous rate for the last second.
    float receive_rate = 1;
    // UDP data received in the current scan (in bytes).
    uint64 data_received = 2;

    // UDP data dropped in bytes per second.
    // This is the instantaneous rate for the last second.
    float data_drop_rate = 3;
    // UDP data dropped in the current scan (in bytes).
    uint64 data_dropped = 4;

    // Number of out of order UDP packets received in the current scan.
    // The UDP packets for all frequency channels of a given set of
    // time samples that start at time t0 shall arrive before the
    // first packet containing data sampled at time t0+2 delta_t,
    // where delta_t is the time spanned by the set of time samples
    // in a single packet.
    uint64 misordered_packets = 5;
    // Number of out of order UDP packets per second. This is the
    // instantaneous rate for the last second.  See the misordered_packets
    // for more detail.
    float misordered_packet_rate = 6;

    // Malformed packets are valid UDP packets, but where contents of
    // the UDP payload does not conform to the specification in the
    // CBF/PST ICD. Examples of malformation include: bad magic-word
    // field, invalid meta-data, incorrect packet size.
    uint64 malformed_packets = 7;
    // The rate of malformed packets per second for the current scan.
    // See the malformed_packets field for more detail.
    float malformed_packet_rate = 8;

    // Total number of (valid) UDP packets that were unexpectedly received.
    // Misdirection could be due to wrong ScanID, Beam ID, Network Interface
    // or UDP port. Receiving misdirected packets is a sign that there is
    // something wrong with the upstream configuration for the scan.
    uint64 misdirected_packets = 9;
    // The rate of mis-directected packets per second.  See documentation
    // on the misdirected_packets field for explanation of what a
    // misdirected packet is.
    float misdirected_packet_rate = 10;

    // Total number of packets with a UDP, IP header or CRC checksum failure.
    // This value is reported from the network interface (NIC).
    uint64 checksum_failure_packets = 11;
    // The number of packet checksum failures per second. See the
    // checksum_failure_packets field for more detail.
    float checksum_failure_packet_rate = 12;

    // The number of packets received where the timestamp has become
    // desynchronised with the packet sequence number * sampling interval
    uint64 timestamp_sync_error_packets = 13;
    // The number of packet timestamp sync errors per second. See the
    // timestamp_sync_error_packets field for more detail.
    float timestamp_sync_error_packet_rate = 14;

    // The number of packets received where the packet sequence number has
    // become desynchronised with the data rate and elapsed time.
    uint64 seq_number_sync_error_packets = 15;
    // The number of packet sequence number sync errors per second. See
    // the seq_number_sync_error_packets for more detail.
    float seq_number_sync_error_packet_rate = 16;
}

// Message for the DSP.DISK monitoring results of a subband.
message DspDiskMonitorData {
    // Disk size (in bytes)
    uint64 disk_capacity = 1;
    // Available disk space left
    uint64 disk_available_bytes = 2;
    // Amount of data written during current scan
    uint64 bytes_written = 3;
    // Current write rate, in bytes / second
    double write_rate = 4;
}

// Message for the STAT.CORE monitoring results of a subband. https://developer.skao.int/projects/ska-pst-stat/en/latest/architecture/index.html#hdf5-data-structure
message StatMonitorData {// The mean of the data for each polarisation and dimension, averaged over all channels.
    repeated float mean_frequency_avg = 1;

    // The mean of the data for each polarisation and dimension, averaged over all channels, except those flagged for RFI.
    repeated float mean_frequency_avg_masked = 2;

    // The variance of the data for each polarisation and dimension, averaged over all channels.
    repeated float variance_frequency_avg = 3;

    // The variance of the data for each polarisation and dimension, averaged over all channels, except those flagged for RFI.
    repeated float variance_frequency_avg_masked = 4;

    // The mean of the data for each polarisation, dimension, and channel.
    repeated float mean_spectrum = 5;

    // The variance of the data for each polarisation, dimension, and channel.
    repeated float variance_spectrum = 6;

    // Mean power of the data for each polarisation and channel.
    repeated float mean_spectral_power = 7;

    // Maximum power of the data for each polarisation and channel.
    repeated float max_spectral_power = 8;

    // Histogram of the input data integer states for each polarisation and dimension, averaged over all channels.
    repeated uint32 histogram_1d_freq_avg = 9;

    // Histogram of the input data integer states for each polarisation and dimension, averaged over all channels, except those flagged for RFI.
    repeated uint32 histogram_1d_freq_avg_masked = 10;

    // Rebinned 2D histogram of the input data integer states for each polarisation, averaged over all channels.
    repeated uint32 histogram_rebinned_2d_freq_avg = 11;

    // Rebinned 2D histogram of the input data integer states for each polarisation, averaged over all channels, except those flagged for RFI.
    repeated uint32 histogram_rebinned_2d_freq_avg_masked = 12;

    // Rebinned histogram of the input data integer states for each polarisation and dimension, averaged over all channels.
    repeated uint32 histogram_rebinned_1d_freq_avg = 13;

    // Rebinned histogram of the input data integer states for each polarisation and dimension, averaged over all channels, except those flagged for RFI.
    repeated uint32 histogram_rebinned_1d_freq_avg_masked = 14;

    // Number of clipped input samples (maximum level) for each polarisation, dimension, and channel.
    repeated uint32 num_clipped_samples_spectrum = 15;

    // Number of clipped input samples (maximum level) for each polarisation and dimension.
    repeated uint32 num_clipped_samples = 16;

    // Spectrogram of the data for each polarisation, rebinned in frequency to NCHAN_DS bins and in time to NDAT_DS bins.
    repeated float spectrogram = 17;

    // Time series of the data for each polarisation, rebinned in time to NDAT_DS bins, averaged over all frequency channels.
    // This includes max, min, and mean of the power in each bin.
    repeated float timeseries = 18;

    // Time series of the data for each polarisation, rebinned in time to NDAT_DS bins, averaged over all frequency channels,
    // except those flagged by RFI. This includes max, min, and mean of the power in each bin.
    repeated float timeseries_masked = 19;
}

// Message used in unit testing to stub
// out the need for ska-pst-common for
// monitoring.
//
// This should only be used internally
// of the ska-pst-common project.
message TestMonitorData {
    // A map of any monitoring data.
    map<string, string> data = 1;
}

// Request from the server to stream monitoring telemetry.
message MonitorRequest {
    // rate in milliseconds to stream data back. The
    // rate should be in the order of seconds but instead
    // of using a float using a long int to represent
    // that time.
    //
    // If the server does not respond in 2 * this rate
    // then the client should raise an alert.
    uint64 polling_rate = 1;
}

// A message to represent the current monitoring data
// for the different services used within PST.
//
// It is only valid to only one field set, such as smrb,
// receive, or the test field.
message MonitorData {
    // At most one monitoring data value is allowed.
    oneof monitor_data {
        // The monitoring data for SMRB.CORE.
        SmrbMonitorData smrb = 1;
        // The monitoring data for RECV.CORE.
        ReceiveMonitorData receive = 2;
        // The monitoring data for DSP.CORE.
        DspDiskMonitorData dsp_disk = 3;
        // The monitoring data for STAT.CORE.
        StatMonitorData stat = 4;
        // Only used for testing
        TestMonitorData test = 99;
    }
}

// Response message from the server that is an envelope
// for a specific type of monitoring data, such at SMRB
// to populate SmrbMonitorData messages and put them
// into the smrb field of the monitore_data sub-message field.
message MonitorResponse {
    // The current monitor data to be returned for the service.
    MonitorData monitor_data = 3;
}

// Have the server abort its current process. This can
// happen IDLE, CONFIGURING, READY, SCANNING, or
// RESETTING states.
message AbortRequest {}

// The Response message for the abort command.
message AbortResponse {}

// Request message to reset the state of a server. Based
// on the SKA Obs State model this should put the server
// in an IDLE (i.e. deconfigured/unconfigured) state but
// still have the beam configuration still set.
message ResetRequest {}

// The response message for the reset command.
message ResetResponse {}

// Request message to restart the state of a server. Based
// on the SKA Obs State model this should put the server
// back to an EMPTY (i.e. no beam configuration set) state.
// The implementation of this may do a logical restart
// rather than restarting the process.
message RestartRequest {}

// The response message for the reset command.
message RestartResponse {}

// An empty request message for the go_to_fault command.
message GoToFaultRequest {
    // the message relating to the fault and why the
    // go_to_fault message was called.
    string error_message = 1;
}

// An emptry response message for the go_to_fault command.
message GoToFaultResponse {}

// A request message to be sent to the service to
// identify which client is connecting.
message ConnectionRequest {
    // The ID of the client. For the TANGO devices this should
    // be the full-qualified domain name of the device.
    string client_id = 1;
}

// An empty response message for the connection request.
message ConnectionResponse {}

// An empty request message to get the environment of the service.
message GetEnvironmentRequest {}

// Message representing value of an environment value. This
// is done as a `oneof` field which allows for a string, float,
// signed int/long, or a unsigned int/long.
message EnvValue {
    oneof value {
        string string_value = 1;
        float float_value = 2;
        sint64 signed_int_value = 3;
        uint64 unsigned_int_value = 4;
    }
}

// The response message for the get_env command.
message GetEnvironmentResponse {
    // A map of values where the key is the environment variable
    // name and the value is of type `EnvValue`.
    //
    // It is valid to return an empty response.
    map<string, EnvValue> values = 1;
}

// The request message for the set_log_level command.
message SetLogLevelRequest {
    // Enum containing the LogLevel to be implemented
    LogLevel log_level = 1;
}

// An empty response message for the set_log_level command
message SetLogLevelResponse {}

// An empty request message for the get_log_level command.
message GetLogLevelRequest {}

// The response message for the get_log_level command.
message GetLogLevelResponse {
    // Enum containing the current LogLevel of the service
    LogLevel log_level = 1;
}

/*
 Service to expose the local monitoring and control functionality
 of a process.
*/
service PstLmcService {
    /*
     * Used by a client to try to connect to the remote service.
     */
    rpc connect(ConnectionRequest) returns (ConnectionResponse);
    /*
     * Used by a client to configure the component with given beam configuration.
     *
     * Beam configuration is different to scan configuration as it relates to
     * how the beam is configured for bandwidth, number of channels, and calculated
     * subbands. Between scans the same beam configuration may be used and this
     * allows the system to be reconfigured without the need of tearing down
     * the shared memory ringbuffers.
     */
    rpc configure_beam(ConfigureBeamRequest) returns (ConfigureBeamResponse);
    /*
     * Used by a client to release a beam and put the component in an state that
     * is not even connected to ring buffers.
     */
    rpc deconfigure_beam(DeconfigureBeamRequest) returns (DeconfigureBeamResponse);
    /*
     * Used by a client to get the current beam configuration for the component.
     */
    rpc get_beam_configuration(GetBeamConfigurationRequest) returns (GetBeamConfigurationResponse);
    /*
     * Used by a client to configure a server to be ready for a scan request
     * putting the server in a READY state.
     */
    rpc configure_scan(ConfigureScanRequest) returns (ConfigureScanResponse);
    /*
     * Used by a client to deconfigure a server and put it back to an IDLE state.
     */
    rpc deconfigure_scan(DeconfigureScanRequest) returns (DeconfigureScanResponse);
    /*
     * Utility method that can be used to get the current scan configuration for a component.
     */
    rpc get_scan_configuration(GetScanConfigurationRequest) returns (GetScanConfigurationResponse);
    /*
     * Used by a client to start a scan of the component.
     */
    rpc start_scan(StartScanRequest) returns (StartScanResponse);
    /*
     * Used by a client to end a scan of the component.
     *
     * The StopScanRequest has an end_time parameter that if set
     * the service must stop the scan at that exact time. This
     * method should block until that time has been reached as
     * to allow the LMC to know that scanning has stopped.
     */
    rpc stop_scan(StopScanRequest) returns (StopScanResponse);
    /*
     * Used by a client to verify the state of the component.
     */
    rpc get_state(GetStateRequest) returns (GetStateResponse);
    /*
     * Used to monitor a service. The service is expected to
     * stream results back and putting the monitor data specific
     * to itself in a given sub-message, i.e. SMRB to return
     * data in an SmrbMonitorData wrapped in a MonitorResponse.
     */
    rpc monitor(MonitorRequest) returns (stream MonitorResponse);
    /*
     * Used by a client to put the server into the ABORTED state.
     * This can affect the configuring and scanning stages and
     * the service must end those stages. If monitoring is happening
     * due to be in a scanning state then the monitoring should also
     * stop as that is only valid for scanning states.
     */
    rpc abort(AbortRequest) returns (AbortResponse);
    /*
     * Used by a client to reset the device from ABORTED or FAULT state
     * into an IDLE / deconfigured state.
     */
     rpc reset(ResetRequest) returns (ResetResponse);
    /*
     * Used by a client to reset the device from ABORTED or FAULT state
     * into an EMPTY state (i.e. not having any beam configuration).
     * Implementations of this can do a logical restart, i.e. make sure
     * the the system is deconfigured for scan and then deconfigure it
     * for beam, resulting in all resources have been released.
     */
     rpc restart(RestartRequest) returns (RestartResponse);

    /*
     * Used by a client to set the service into a FAULT state. This
     * can be due to another part of the logical BEAM being faulty
     * and a call to this method from a client it advising the service
     * to move to the FAULT state.
     *
     * By moving to the FAULT state the service can be reset or
     * restarted.
     *
     * Implementations of this should stop scanning if there it is
     * in a scanning state.
     */
     rpc go_to_fault(GoToFaultRequest) returns (GoToFaultResponse);

     /**
      * Used by a client to get the environmental state for the sevice.
      *
      * The client may call this many times as a form of monitoring.
      * Unlike the monitor fuction, which is for monitoring a scan,
      * this method doesn't stream results back as it is a standard
      * request and response method.
      *
      * Implementations of this should document clearly what they
      * provide in the map of values. The default implementation is
      * to return an empty map of values.
      */
      rpc get_env(GetEnvironmentRequest) returns (GetEnvironmentResponse);

     /**
      * Used by a client to set LogLevel of the service.
      *
      * The client may call this many times to dynamically change the LogLevel.
      */
      rpc set_log_level(SetLogLevelRequest) returns (SetLogLevelResponse);

      /**
       * Used by a client to get LogLevel of the service.
       */
      rpc get_log_level(GetLogLevelRequest) returns (GetLogLevelResponse);
}
