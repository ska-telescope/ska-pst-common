/*
 * Copyright 2022 Square Kilometre Array Observatory
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package ska.pst.lmc;

// This is a protobuf representation of the SKA Obs State
// model enum. This is used by the LMC client to check
// the state of the service. Not all states will be valid
// for the system but are provided to map one-to-one with
// the SKA specific model
enum ObsState {
    // The sub-array is ready to observe, but is in an undefined
    // configuration and has no resources allocated.
    EMPTY = 0;

    // The system is allocating resources to, or deallocating resources
    // from, the subarray. This may be a complete de/allocation, or it may
    // be incremental. In both cases it is a transient state and will
    // automatically transition to IDLE when complete. For some subsystems
    // this may be a very brief state if resourcing is a quick activity.
    RESOURCING = 1;

    // The subarray has resources allocated and is ready to be used for
    // observing. In normal science operations these will be the resources
    // required for the upcoming SBI execution.
    IDLE = 2;

    // The subarray is being configured ready to scan. On entry to the
    // state no assumptions can be made about the previous conditions. It
    // is a transient state and will automatically transition to READY when
    // it completes normally.
    CONFIGURING = 3;

    // The subarray is fully prepared to scan, but is not actually taking
    // data or moving in the observed coordinate system (it may be
    // tracking, but not moving relative to the coordinate system).
    READY = 4;

    // The subarray is taking data and, if needed, all components are
    // synchronously moving in the observed coordinate system. Any changes
    // to the sub-systems are happening automatically (this allows for a
    // scan to cover the case where the phase centre is moved in a
    // pre-defined pattern).
    SCANNING = 5;

    // The subarray is trying to abort what it was doing due to having been
    // interrupted by the controller.
    ABORTING = 6;

    // The subarray has had its previous state interrupted by the
    // controller, and is now in an aborted state.
    ABORTED = 7;

    // """
    // The subarray device is resetting to the IDLE state.
    // """
    RESETTING = 8;

    // The subarray has detected an error in its observing state making it
    // impossible to remain in the previous state.
    FAULT = 9;

    // The subarray device is restarting, as the last known stable state is
    // where no resources were allocated and the configuration undefined.
    RESTARTING = 10;
}

// Enum representing particular error code that might
// happen during processing.
enum ErrorCode {
    // Not used but to avoid the default value
    OK                          = 0;
    // Used if the request sent to the service is invalid, such as a Oneof value is not
    // set when it should have been.
    INVALID_REQUEST             = 1;
    // There was an internal server error raised.
    INTERNAL_ERROR              = 2;
    // The resources of the component already assigned. Should have released resources beforehand.
    RESOURCES_ALREADY_ASSIGNED  = 3;
    // There are no resources assigned to this component.
    RESOURCES_NOT_ASSIGNED      = 4;
    // The service is already performing a scann
    ALREADY_SCANNING            = 5;
    // The service is not scanning
    NOT_SCANNING                = 6;
}

// Enum representing the observation mode for the scan
enum ObservationMode {
    PULSAR_TIMING       = 0;
    DYNAMIC_SPECTRUM    = 1;
    FLOW_THROUGH        = 2;
}

// A status message that will be returned by the services
// Only valid if there is an error
message Status {
    // The error code for which this status relates to.
    ErrorCode code      = 1;
    // Optional error message to be provided when the error occurs.
    string    message   = 2;
}

// Represents the resource configuration for a share memory ring buffer (SMRB)
message SmrbResources {
    // The key for the data buffer
    string  data_key    = 1;
    // The key for the weights buffer
    string  weights_key = 2;
    // The number of header buffers
    uint64  hb_nbufs    = 3;
    // The size in bytes of the header buffers
    uint64  hb_bufsz    = 4;
    // The number of data buffers
    uint64  db_nbufs    = 5;
    // The size in bytes of the data buffers
    uint64  db_bufsz    = 6;
    // The number of weights bufffers
    uint64  wb_nbufs    = 7;
    // The size of the weights buffers
    uint64  wb_bufsz    = 8;
}

// Message to represent subband configuration for RECV.CORE
message ReceiveSubbandResources {
    // subband data key
    string data_key                 = 1;
    // subband weights key
    string weights_key              = 2;
    // cpu code to bind processing
    uint32 cpu_core                 = 3;
    // numa node from which memory should be allocated for sub-band
    uint32 numa_node                = 4;
    // RF bandwidht for sub-band
    float bandwidth                 = 5;
    // number of input frequency channels for subband
    uint32 nchan                    = 6;
    // lowest and highest frequency channel number for input of sub-band
    repeated uint32 chan_range      = 7;
    // subband centre frequencey
    float frequency                 = 8;
    // lowest and highest frequenc channel number for output of sub-band
    repeated uint32 chan_out_range  = 9;
    // number of output frequenc channels of sub-band
    uint32 nchan_out                = 10;
    // total output bandwidht across the frequence channgels of sub-band
    float bandwidth_out             = 11;
    // centre RF frequency of output channels of subband
    float frequency_out             = 12;
    // IP of Ethernet interface upon which UDP packets will be received for subband
    repeated uint32 interface       = 13;
    // number of UDP ports upon which to accept packets for sub-band
    uint32 nports                   = 14;
    // list of UDP network port numbers for sub-band
    repeated uint32 ports           = 15;
}

// Message to represent configuration for the RECV.CORE of PST
message ReceiveResources {
    // Number of time samples per packet
    uint64 udp_nsamp            = 1;
    // Number of time samples per relative weight
    uint64 wt_nsamp             = 2;
    // Number of frequency channels per packet
    uint64 udp_nchan            = 3;
    // Centre frequency of observation
    float frequency             = 4;
    // Total critical bandwidth
    float band_width            = 5;
    // Total number of input channels
    uint64 nchan                = 6;
    // The timig beam identifier
    string frontend             = 7;
    // native polarisation of feed
    string fd_poln              = 8;
    // handedness of feed
    // valid values are +1 or -1
    // For value of +1 for XYZ forming RH set with Z in the
    // direction of propagation. Looking up into the feed of
    // a prime-focus receiver or at the sky).
    sint32 fn_hand              = 9;
    // feed angle
    float fn_sang               = 10;
    // feed tracking mode
    string fd_mode              = 11;
    // feed position angle
    // this is For feed_mode = ‘FA’ this is respect to the telescope’s
    // reference frame (feed_angle = 0), and for feed_mode = ‘CPA’
    // this is with respect to the celestial north (parallic angle = 0)
    // or with respect to the Galactic north for coordinate_mode = ‘GALACTIC’.
    float fa_req                = 12;
    // number of receptors in sub-array
    uint64 nant                 = 13;
    // list of receptors
    repeated string antennnas   = 14;
    // receptor weights
    repeated float ant_weights  = 15;
    // number of polarisation
    uint64 npol                 = 16;
    // number of bits per sample - should always be 2
    uint64 ndim                 = 17;
    // sampling time, inferred from the bandwidth, nchan and oversample
    float tsamp                 = 18;
    // oversampling rate
    repeated uint64 ovrsamp     = 19;
    // number of subbands
    uint64 nsubband             = 20;
    // subband configuratio
    ReceiveSubbandResources subband_resources = 21;
}

// Assign resources is used by the LMC to assign
// resources that may be later used during a scan.
message AssignResourcesRequest {
    oneof resources {
        SmrbResources smrb = 1;
        ReceiveResources receive = 2;
    }
}

// An empty response message that is used to define
// successfully assigned resources.
message AssignResourcesResponse {
}

// An empty message used in requesting the release
// of resources.
message ReleaseResourcesRequest {
}

// An empty respinse message that is used in
// releasing resources
message ReleaseResourcesResponse {
}

// An empty message used to request the assigned
// resources.
message GetAssignedResourcesRequest {}

// The response message for getting the assigned
// resources of the component.
message GetAssignedResourcesResponse {
    oneof resources {
        SmrbResources smrb = 1;
        ReceiveResources receive = 2;
    }
}

// Message representing scan configuration for SMRB
// this is an empty message for SMRB as there is nothing
// specific for the scan that needs to be configured.
message SmrbScanConfiguration {}


// Message representing scan calibration values
// this is used to allow for the calibration values to
// be null (i.e. not set) as protobuf defaults not
// set fields to zero
message ScanCalibration {
    // operation mode for the injected calibration
    string cal_mode            = 1;
    // calibration modulation frequency
    float cal_freq             = 2;
    // calibration signal duty cycle
    float cal_dcyc             = 3;
    // calibration phase leading edge
    float cal_phs              = 4;
    // number of states in calibration pulse
    uint32  cal_nphs           = 5;
}

// Message representing scan configuration for RECV
//
// NOTE - OBSMODE is listed in detailed design but
// the LMC is set into an OBSMODE and this would
// be sent to DSP directly.
message ReceiveScanConfiguration {
    // UTC data and time to perform the requested command
    string activation_time      = 1;
    // Unique indentifer for observation
    string observation_id       = 2;
    // 64-bit scan ID
    uint64 scan_id              = 3;
    // The person in charge of the observation
    string observer             = 4;
    // Project the observations are for
    string projid               = 5;
    // ID for sub-array pointing
    string pnt_id               = 6;
    // ID for the sub-array
    string subbary_id           = 7;
    // IRTF coordinates of the telescope delay centre
    string itrf                 = 8;
    // Beam major axis
    string bmaj                 = 9;
    // Beam minor axis
    string bmin                 = 10;
    // frame of coordinates
    string coord_md             = 11;
    // coordinate epoch
    string equinox              = 12;
    // X component of starting co-ords in COORD_MD frame
    string stt_crd1             = 13;
    // Y component of starting co-ords in COORD_MD frame
    string stt_crd2             = 14;
    // tracking mode
    string trk_mode             = 15;
    // maximum length of observation
    int32 scanlen_max           = 16;
    // identifier of preconfigured test-vector
    string test_vector          = 17;
    // calibration information for the scan
    ScanCalibration calibration = 18;
}

// Request message to configure a server to
// be ready for a scan request.
message ConfigureRequest {
    oneof configuration {
        SmrbScanConfiguration smrb = 1;
        ReceiveScanConfiguration receive = 2;
    }
}

// An empty message used as a response for
// a configure request.
message ConfigureResponse {
}

// An empty message used to retreive the current
// scan configuration of a component.
message GetScanConfigurationRequest {}

// A response message used to return the scan
// configuration of the a component.
message GetScanConfigurationResponse {
    oneof configuration {
        SmrbScanConfiguration smrb = 1;
        ReceiveScanConfiguration receive = 2;
    }
}

// An empty message used to request that a
// server deconfigures itself.
message DeconfigureRequest {}

// An empty message used as a response for
// a deconfigure request.
message DeconfigureResponse {}

// Request that the component initiates a scan
message ScanRequest {}

// Response for the scan request.
message ScanResponse {}

// Request that the component stops scanning
//
// if end_time > 0 then the scan must stop
// at that exact time.
message EndScanRequest {
    // the time at which all the scans should stop
    // as to allow synchonisation between RECV subbands
    uint64 end_time = 1;
}

// Response for the end scan request.
message EndScanResponse {}

// Request from the server to find out what state it is in.
message GetStateRequest {}

// Response from the server for what state it is in.
message GetStateResponse {
    ObsState state = 1;
}

// Message for the statistics of a subband ring buffer
message SmrbStatitics {
    // total number of buffers
    uint64 nbufs = 1;

    // size of each buffer in bytes
    uint64 bufsz = 2;

    // total number of buffers written to the ring
    uint64 written = 3;

    // total number of buffers read from the ring
    uint64 read = 4;

    // number of filled buffers in the ring
    uint64 full = 5;

    // number of cleared buffers in the ring
    uint64 clear = 6;

    // number of free buffers in the ring
    uint64 available = 7;
}

// Message for the monitor results of a subband.
// This includes the data and weights statistics
message SmrbMonitorData {
    SmrbStatitics data = 1;
    SmrbStatitics weights = 2;
}

// Message for the Receive monitoring results of a subband.
message ReceiveMonitorData {
    // UDP data received in bytes per second
    float receive_rate = 1;
    // UDP data received in the current scan in bytes
    uint64 data_received = 2;
    // UDP data dropped in bytes per second
    float data_drop_rate = 3;
    // UDP data dropped in the current scan in bytes
    uint64 data_dropped = 4;
    // Number of out of order UDP packets received in the current scan
    uint64 misordered_packets = 5;
}

// Request from the server to stream monitoring telemetry.
message MonitorRequest {
    // rate in milliseconds to stream data back. The
    // rate should be in the order of seconds but instead
    // of using a float using a long int to represent
    // that time.
    //
    // If the server does not respond in 2 * this rate
    // then the client should raise an alert.
    uint64 polling_rate = 1;
}

// Response message from the server that is an envelope
// for a specific type of monitoring data, such at SMRB
// to populate SmrbMonitorData messages and put them
// into the smrb field of this message.
message MonitorResponse {
    oneof monitor_data {
        SmrbMonitorData smrb = 1;
    }
}

// Have the server abort its current process. This can
// happen IDLE, CONFIGURING, READY, SCANNING, or
// RESETTING states.
message AbortRequest {}

// The Response message for the abort command.
message AbortResponse {}

// Request message to reset the state of a server. Based
// on the SKA Obs State model this should put the server
// in an IDLE (i.e. deconfigured/unconfigured) state but
// still have resources assigned.
message ResetRequest {
}

// The response message for the reset command.
message ResetResponse {}

// Request message to restart the state of a server. Based
// on the SKA Obs State model this should put the server
// back to an EMPTY (i.e. no resources assigned) state.
// The implementation of this may do a logical restart
// rather than restarting the process.
message RestartRequest {
}

// The response message for the reset command.
message RestartResponse {}

// A request message to be sent to the service to
// identify which client is connecting.
message ConnectionRequest {
    string client_id = 1;
}

// An empty response message for the connection request.
message ConnectionResponse {
}

/*
 Service to expose the local monitoring and control functionality
 of a process.
*/
service PstLmcService {
    /*
     * Used by a client to try to connect to the remote service.
     */
    rpc connect(ConnectionRequest) returns (ConnectionResponse);
    /*
     * Used by a client to assign resources of the component.
     */
    rpc assign_resources(AssignResourcesRequest) returns (AssignResourcesResponse);
    /*
     * Used by a client to release the resources assigned by a component.
     */
    rpc release_resources(ReleaseResourcesRequest) returns (ReleaseResourcesResponse);
    /*
     * Used by a client to get the currently assigned resource details of a component.
     */
    rpc get_assigned_resources(GetAssignedResourcesRequest) returns (GetAssignedResourcesResponse);
    /*
     * Used by a client to configure a server to be ready for a scan request
     * putting the server in a READY state.
     */
    rpc configure(ConfigureRequest) returns (ConfigureResponse);
    /*
     * Used by a client to deconfigure a server and put it back to an IDLE state.
     */
    rpc deconfigure(DeconfigureRequest) returns (DeconfigureResponse);
    /*
     * Utility method that can be used to get the current scan configuration for a component.
     */
    rpc get_scan_configuration(GetScanConfigurationRequest) returns (GetScanConfigurationResponse);
    /*
     * Used by a client to start a scan of the component.
     */
    rpc scan(ScanRequest) returns (ScanResponse);
    /*
     * Used by a client to end a scan of the component.
     *
     * The EndScanRequest has an end_time parameter that if set
     * the service must stop the scan at that exact time. This
     * method should block until that time has been reached as
     * to allow the LMC to know that scanning has stopped.
     */
    rpc end_scan(EndScanRequest) returns (EndScanResponse);
    /*
     * Used by a client to verify the state of the component.
     */
    rpc get_state(GetStateRequest) returns (GetStateResponse);
    /*
     * Used to monitor a service. The service is expected to
     * stream results back and putting the monitor data specific
     * to itself in a given sub-message, i.e. SMRB to return
     * data in an SmrbMonitorData wrapped in a MonitorResponse.
     */
    rpc monitor(MonitorRequest) returns (stream MonitorResponse);
    /*
     * Used by a client to put the server into the ABORTED state.
     * This can affect the configuring and scanning stages and
     * the service must end those stages. If monitoring is happening
     * due to be in a scanning state then the monitoring should also
     * stop as that is only valid for scanning states.
     */
    rpc abort(AbortRequest) returns (AbortResponse);
    /*
     * Used by a client to reset the device from ABORTED or FAULT state
     * into an IDLE / deconfigured state.
     */
     rpc reset(ResetRequest) returns (ResetResponse);
    /*
     * Used by a client to reset the device from ABORTED or FAULT state
     * into an EMPTY, no resources assigned, state. Implementations of
     * this can do a logical restart, i.e. make sure the the system is
     * deconfigured first and then release all the resources.
     */
     rpc restart(RestartRequest) returns (RestartResponse);
}
