/*
 * Copyright 2022 Square Kilometre Array Observatory
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package ska.pst.lmc;

// Enum representing particular error code that might
// happen during processing.
enum ErrorCode {
    // Not used but to avoid the default value
    OK                          = 0;
    // Used if the request sent to the service is invalid, such as a Oneof value is not
    // set when it should have been.
    INVALID_REQUEST             = 1;
    // There was an internal server error raised.
    INTERNAL_ERROR              = 2;
    // The resources of the component already assigned. Should have released resources beforehand.
    RESOURCES_ALREADY_ASSIGNED  = 3;
    // There are no resources assigned to this component.
    RESOURCES_NOT_ASSIGNED      = 4;
    // The service is already performing a scann
    ALREADY_SCANNING            = 5;
    // The service is not scanning
    NOT_SCANNING                = 6;
}

// A status message that will be returned by the services
// Only valid if there is an error
message Status {
    // The error code for which this status relates to.
    ErrorCode code      = 1;
    // Optional error message to be provided when the error occurs.
    string    message   = 2;
}

// Represents the resource configuration for a share memory ring buffer (SMRB)
message SmrbResources {
    // The key for the data buffer
    string  data_key    = 1;
    // The key for the weights buffer
    string  weights_key = 2;
    // The number of header buffers
    uint64  hb_nbufs    = 3;
    // The size in bytes of the header buffers
    uint64  hb_bufsz    = 4;
    // The number of data buffers
    uint64  db_nbufs    = 5;
    // The size in bytes of the data buffers
    uint64  db_bufsz    = 6;
    // The number of weights bufffers
    uint64  wb_nbufs    = 7;
    // The size of the weights buffers
    uint64  wb_bufsz    = 8;
}

// Assign resources is used by the LMC to assign
// resources that may be later used during a scan.
message AssignResourcesRequest {
    oneof resources {
        SmrbResources smrb = 1;
    }
}

// An empty response message that is used to define
// successfully assigned resources.
message AssignResourcesResponse {
}

// An empty message used in requesting the release
// of resources.
message ReleaseResourcesRequest {
}

// An empty respinse message that is used in
// releasing resources
message ReleaseResourcesResponse {
}

// An empty message used to request the assigned
// resources.
message GetAssignedResourcesRequest {}

// The response message for getting the assigned
// resources of the component.
message GetAssignedResourcesResponse {
    oneof resources {
        SmrbResources smrb = 1;
    }
}

// Request that the component initiates a scan
message ScanRequest {}

// Response for the scan request.
message ScanResponse {}

// Request that the component stops scanning
message EndScanRequest {}

// Response for the end scan request.
message EndScanResponse {}

// Request from the server to find out what state it is in.
message GetStateRequest {}

// This is a protobuf representation of the SKA Obs State
// model enum. This is used by the LMC client to check
// the state of the service. Not all states will be valid
// for the system but are provided to map one-to-one with
// the SKA specific model
enum ObsState {
    // The sub-array is ready to observe, but is in an undefined
    // configuration and has no resources allocated.
    EMPTY = 0;

    // The system is allocating resources to, or deallocating resources
    // from, the subarray. This may be a complete de/allocation, or it may
    // be incremental. In both cases it is a transient state and will
    // automatically transition to IDLE when complete. For some subsystems
    // this may be a very brief state if resourcing is a quick activity.
    RESOURCING = 1;

    // The subarray has resources allocated and is ready to be used for
    // observing. In normal science operations these will be the resources
    // required for the upcoming SBI execution.
    IDLE = 2;

    // The subarray is being configured ready to scan. On entry to the
    // state no assumptions can be made about the previous conditions. It
    // is a transient state and will automatically transition to READY when
    // it completes normally.
    CONFIGURING = 3;

    // The subarray is fully prepared to scan, but is not actually taking
    // data or moving in the observed coordinate system (it may be
    // tracking, but not moving relative to the coordinate system).
    READY = 4;

    // The subarray is taking data and, if needed, all components are
    // synchronously moving in the observed coordinate system. Any changes
    // to the sub-systems are happening automatically (this allows for a
    // scan to cover the case where the phase centre is moved in a
    // pre-defined pattern).
    SCANNING = 5;

    // The subarray is trying to abort what it was doing due to having been
    // interrupted by the controller.
    ABORTING = 6;

    // The subarray has had its previous state interrupted by the
    // controller, and is now in an aborted state.
    ABORTED = 7;

    // """
    // The subarray device is resetting to the IDLE state.
    // """
    RESETTING = 8;

    // The subarray has detected an error in its observing state making it
    // impossible to remain in the previous state.
    FAULT = 9;

    // The subarray device is restarting, as the last known stable state is
    // where no resources were allocated and the configuration undefined.
    RESTARTING = 10;
}

// Response from the server for what state it is in.
message GetStateResponse {
    ObsState state = 1;
}

// Message for the statistics of a subband ring buffer
message SmrbStatitics {
    // total number of buffers
    uint64 nbufs = 1;

    // size of each buffer in bytes
    uint64 bufsz = 2;

    // total number of buffers written to the ring
    uint64 written = 3;

    // total number of buffers read from the ring
    uint64 read = 4;

    // number of filled buffers in the ring
    uint64 full = 5;

    // number of cleared buffers in the ring
    uint64 clear = 6;

    // number of free buffers in the ring
    uint64 available = 7;
}

// Message for the monitor results of a subband.
// This includes the data and weights statistics
message SmrbMonitorData {
    SmrbStatitics data = 1;
    SmrbStatitics weights = 2;
}

// Request from the server to stream monitoring telemetry.
message MonitorRequest {
    // rate in milliseconds to stream data back. The
    // rate should be in the order of seconds but instead
    // of using a float using a long int to represent
    // that time.
    //
    // If the server does not respond in 2 * this rate
    // then the client should raise an alert.
    uint64 polling_rate = 1;
}

// Response message from the server that is an envelope
// for a specific type of monitoring data, such at SMRB
// to populate SmrbMonitorData messages and put them
// into the smrb field of this message.
message MonitorResponse {
    oneof monitor_data {
        SmrbMonitorData smrb = 1;
    }
}

// A request message to be sent to the service to
// identify which client is connecting.
message ConnectionRequest {
    string client_id = 1;
}

// An empty response message for the connection request.
message ConnectionResponse {
}

/**
 Service to expose the local monitoring and control functionality
 of a process.
*/
service PstLmcService {
    /**
     * Used by a client to try to connect to the remote service.
     */
    rpc connect(ConnectionRequest) returns (ConnectionResponse);
    /**
     * Used by a client to assign resources of the component.
     */
    rpc assign_resources(AssignResourcesRequest) returns (AssignResourcesResponse);
    /**
     * Used by a client to release the resources assigned by a component.
     */
    rpc release_resources(ReleaseResourcesRequest) returns (ReleaseResourcesResponse);
    /**
     * Used by a client to get the currently assigned resource details of a component.
     */
    rpc get_assigned_resources(GetAssignedResourcesRequest) returns (GetAssignedResourcesResponse);
    /**
     * Used by a client to start a scan of the component.
     */
    rpc scan(ScanRequest) returns (ScanResponse);
    /**
     * Used by a client to end a scan of the component.
     */
    rpc end_scan(EndScanRequest) returns (EndScanResponse);
    /**
     * Used by a client to verify the state of the component.
     */
    rpc get_state(GetStateRequest) returns (GetStateResponse);
    /**
     * Used to monitor a service. The service is expected to
     * stream results back and putting the monitor data specific
     * to itself in a given sub-message, i.e. SMRB to return
     * data in an SmrbMonitorData wrapped in a MonitorResponse.
     */
    rpc monitor(MonitorRequest) returns (stream MonitorResponse);
}
