variables:
  # Needed if you want automatic submodule checkout
  # For details see https://docs.gitlab.com/ee/ci/yaml/README.html#git-submodule-strategy
  GIT_SUBMODULE_STRATEGY: recursive
  SKA_CPP_DOCKER_BUILDER_IMAGE: artefact.skao.int/ska-cicd-cpp-build-base:0.2.10
  K8S_TEST_CLUSTER_TAG: k8srunner
  SKA_RELEASE_REGISTRY: artefact.skao.int
  GITLAB_OCI_COMMON_REGISTRY: registry.gitlab.com/ska-telescope/pst/ska-pst-common
  GITLAB_OCI_BUILDTOOLS_REGISTRY: registry.gitlab.com/ska-telescope/pst/ska-pst-buildtools
  # OCI variables that overrides values in Makefile
  # CI Variables enable upstream/downstream CI integration
  PST_OCI_BUILDTOOLS_REGISTRY: $SKA_RELEASE_REGISTRY
  PST_OCI_BUILDTOOLS_IMAGE: ska-pst-buildtools
  PST_OCI_BUILDTOOLS_TAG: "0.0.3"
  PST_OCI_COMMON_REGISTRY: $SKA_RELEASE_REGISTRY
  PST_OCI_COMMON_BUILDER: ska-pst-common-builder
  PST_OCI_COMMON_PROTO: ska-pst-common-proto
  PST_OCI_COMMON_TAG: ""
  OCI_IMAGE_BUILD_CONTEXT: $(PWD)
  OCI_IMAGE: "$PST_OCI_COMMON_BUILDER $PST_OCI_COMMON_PROTO"

image: $SKA_CPP_DOCKER_BUILDER_IMAGE

.src_dir_ref_storage: &src_dir_ref_storage
  - mkdir build || true
  - pwd > build/original_source_directory

.src_dir_ref_replacement: &src_dir_ref_replacement
  - old_sdir=`cat build/original_source_directory`
  - this_sdir=`pwd`
  - find build
    -type f -a
    \! \(
      -perm /111 -o
      \(
        -name '*.o' -o -name '*.a' -o -name '*.so'
      \)
    \)
    -exec sed -i "s|$old_sdir|$this_sdir|g" {} +

stages:
  - build
  - lint
  - test
  - publish
  - scan
  - pages

.common:
  image: $GITLAB_OCI_BUILDTOOLS_REGISTRY/$PST_OCI_BUILDTOOLS_IMAGE:$PST_OCI_BUILDTOOLS_TAG
  tags: [k8srunner]

.common.artifact-builder:
  extends: .common
  before_script:
    - *src_dir_ref_storage

  artifacts:
    paths:
      - build

.common.artifact-retriever:
  extends: .common
  before_script:
    - *src_dir_ref_replacement

.common.lint:
  extends: .common.artifact-retriever

build_debug:
  extends: .common.artifact-builder
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  script:
    - make local-cpp-build-debug

build_release:
  extends: .common.artifact-builder
  stage: build
  script:
    - make local-cpp-build-release

build_export_compile_commands:
 extends: .common.artifact-builder
 stage: build
 script:
    - make local-cpp-build-export-compile-commands

lint_clang_tidy:
  extends: .common.lint
  stage: lint
  needs: ["build_export_compile_commands"]
  script:
    - make local-cpp-lint-clang
  artifacts:
    paths:
      - ./build

lint_iwyu:
  extends: .common.lint
  stage: lint
  needs: ["build_export_compile_commands"]
  script:
    - make local-cpp-lint-iwyu
  artifacts:
    paths:
      - ./build

lint_cppcheck:
  extends: .common.lint
  stage: lint
  needs: ["build_export_compile_commands"]
  script:
    - make local-cpp-lint-cppcheck
  artifacts:
    paths:
      - ./build
    expire_in: 1 week
    when: always

test:
  extends: .common.artifact-retriever
  stage: test
  needs: ["build_debug"]
  before_script:
    - make local-cpp-test-ctest
  script:
    - *src_dir_ref_storage
    - cd build
    - mkdir -p reports
    - ctest2junit > reports/unit-tests.xml
  # Capture the error logs
  # allow_failure: true
  artifacts:
    paths:
      - build/
    reports:
      junit: build/reports/unit-tests.xml

test_memcheck:
  extends: .common.artifact-retriever
  stage: test
  needs: ["build_debug"]
  script:
    - make local-cpp-test-ctest-memcheck
  artifacts:
    paths:
      - build/
  only:
    - schedules

test_debug_build:
  extends: .common.artifact-retriever
  stage: test
  when: always
  needs: ["build_debug"]
  script:
    - make local-cpp-test-ctest
  artifacts:
    paths:
      - build/

dynamic_vars:
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  script:
    - echo "PST_OCI_COMMON_TAG=$(grep -m 1 -o '[0-9].*' .release)-dev.c${CI_COMMIT_SHORT_SHA}" > build.env
    - echo "PST_OCI_COMMON_RELEASE=$(grep -m 1 -o '[0-9].*' .release)" >> build.env
  artifacts:
    reports:
      dotenv: build.env

oci-image-build:
  needs:
    - dynamic_vars
  dependencies:
    - dynamic_vars
  script:
    - make oci-build-all CAR_OCI_REGISTRY_HOST=${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME} OCI_BUILD_ADDITIONAL_ARGS=" --build-arg BUILD_IMAGE=$PST_OCI_BUILDTOOLS_REGISTRY/$PST_OCI_BUILDTOOLS_IMAGE:$PST_OCI_BUILDTOOLS_TAG"
  rules:
    - if: ($CI_COMMIT_BRANCH =~ /at3.*|skb.*|main/) || (($CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /at3.*|skb.*/) && ($CI_PIPELINE_SOURCE == "merge_request_event"))
      variables:
        PST_OCI_COMMON_REGISTRY: ${GITLAB_OCI_COMMON_REGISTRY}
        PST_OCI_BUILDTOOLS_REGISTRY: ${GITLAB_OCI_BUILDTOOLS_REGISTRY}
    - if: ($CI_COMMIT_TAG) || ($CI_COMMIT_BRANCH =~ /rel.*|main/) || (($CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /rel.*/) && ($CI_PIPELINE_SOURCE == "merge_request_event"))
      variables:
        PST_OCI_COMMON_REGISTRY: ${SKA_RELEASE_REGISTRY}
        PST_OCI_BUILDTOOLS_REGISTRY: ${SKA_RELEASE_REGISTRY}

oci-image-publish:
  when: manual

include:
  # OCI
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

  # Conan
  # - project: 'ska-telescope/templates-repository'
  #   file: 'gitlab-ci/includes/conan.gitlab-ci.yml'

  # Helm
  # - project: 'ska-telescope/templates-repository'
  #   file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

  # K8s
  # - project: 'ska-telescope/templates-repository'
  #   file: 'gitlab-ci/includes/k8s.gitlab-ci.yml'

  # Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'

  # Common runtime tests
  - local: '.gitlab/ci/tests.gitlab-ci.yml'

  # Create Gitlab CI badges from CI metrics
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

  # Umbrella include for all Raw life cycle stages
  - project: 'ska-telescope/templates-repository'
    file: gitlab-ci/includes/release.gitlab-ci.yml

    # Development or debugging based builds - downstream integration test
  - local: '.gitlab/ci/downstream.development.gitlab-ci.yml'
    rules:
      - if: ($CI_COMMIT_BRANCH =~ /at3.*|skb.*|main/) && ($CI_PIPELINE_SOURCE != "pipeline")

  # Merge request builds - downstream integration test
  - local: '.gitlab/ci/downstream.merge.gitlab-ci.yml'
    rules:
      - if: $CI_PIPELINE_SOURCE == "merge_request_event"

  # Release builds - downstream integration test
  - local: '.gitlab/ci/downstream.release.gitlab-ci.yml'
    rules:
      - if: ($CI_COMMIT_BRANCH =~ /rel.*|main/) && ($CI_PIPELINE_SOURCE != "pipeline")
      - if: $CI_COMMIT_TAG
